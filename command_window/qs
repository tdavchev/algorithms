#!/usr/bin/env python

'''
Command line tool based on Python 3.
Functionality:
1) Outer-join point-wise addition of data-frames.
2) Takes the sum across all rows of a data-frame.
3) Computes the transpose of a data-frame.

To use as a command line tool: 
1) chmod +x qs
2) export PATH=$PATH:$(pwd)

author: Todor Davchev
date: 25.03.2018
'''

import csv, sys, re
import numpy as np
from typing import Tuple, Dict, AbstractSet, List

Special = Dict[str, float]
DoubleSpecial = Dict[str, Special]
ListStr = List[str]
AbSet = AbstractSet[str]
DDictCol = Tuple[DoubleSpecial, ListStr]

def get_columns_set(content:ListStr, columns:AbSet ) -> AbSet:
    for col in content:
        columns.add("".join(re.findall("([A-Za-z0-9\-\_]+)", col)))

    return columns

def get_columns_list(content:ListStr, columns:ListStr) -> ListStr:
    for col in content:
        columns.append("".join(re.findall("([A-Za-z0-9\-\_]+)", col)))

    return columns

def print_column_names(columns:ListStr) -> None:
    print("", end=",")
    for idx, col in enumerate(columns):
        if idx < len(columns)-1:
            print(col, end=",")
        else:
            print(col)

def _return_sums(dct:DoubleSpecial, columns:ListStr) -> None:
    print("sum", end=",")
    for idx, col_key in enumerate(columns):
        if idx < len(columns)-1:
            if col_key in dct.keys():
                print("%.2f"%dct[col_key], end=",")
            else:
                print(0.0, end=",")
        else:
            if col_key in dct.keys():
                print("%.2f"%dct[col_key])
            else:
                print(0.0)


def _return(dct: DoubleSpecial, columns: ListStr) -> None:
    for row_key in dct:
        print(row_key, end=",")
        for idx, col_key in enumerate(columns):
            if idx < len(columns)-1:
                if col_key in dct[row_key].keys():
                    print(dct[row_key][col_key], end=",")
                else:
                    print(0.0, end=",")
            else:
                if col_key in dct[row_key].keys():
                    print(dct[row_key][col_key])
                else:
                    print(0.0)

def outer_join(data: ListStr, columns: ListStr, data_struct: DoubleSpecial) -> DDictCol:
    for text in data:
        split_row = text.split(",")
        row_name = "".join(re.findall("([A-Za-z0-9\-\_]+)", split_row[0]))
        content = split_row[1:]
        if len(row_name) < 1: # if it starts with "" then we are looking at the column names row
            curr_cols = get_columns_list(content, [])
            columns = get_columns_set(content, columns)
        else: # first col is month and year
            if row_name in data_struct.keys(): # might have not considered all current collumn names
                for idx, column_name in enumerate(curr_cols):
                    if column_name in data_struct[row_name].keys():
                        if split_row[idx+1] != "":
                            data_struct[row_name][column_name] += float(split_row[idx+1])
                    else:
                        if split_row[idx+1] != "":
                            data_struct[row_name][column_name] = float(split_row[idx+1])
            else:
                data_struct[row_name] = {curr_cols[i]: float(split_row[i+1]) for i in range(len(curr_cols)) if split_row[i+1] != ""}

    return data_struct, columns

def _sum(data: ListStr, columns: ListStr, data_struct: DoubleSpecial) -> DDictCol:
    for text in data:
        split_row = text.split(",")
        row_name = "".join(re.findall("([A-Za-z0-9\-\_]+)", split_row[0]))
        content = split_row[1:]
        if len(row_name) < 1: # if it starts with "" then we are looking at the column names row
            curr_cols = get_columns_list(content, [])
            columns = get_columns_set(content, columns)
        else: # first col is month and year
            for idx, column_name in enumerate(curr_cols):
                if column_name in data_struct.keys():
                    if split_row[idx+1] != "":
                        data_struct[column_name] += float(split_row[idx+1])
                else:
                    if split_row[idx+1] != "":
                        data_struct[column_name] = float(split_row[idx+1])

    return data_struct, columns

def transpose(data:ListStr, columns:ListStr, data_struct:DoubleSpecial) -> DDictCol:
    months = set()
    for text in data:
        split_row = text.split(",")
        row_name = "".join(re.findall("([A-Za-z0-9\-\_]+)", split_row[0]))
        content = split_row[1:]
        if len(row_name) < 1: # if it starts with "" then we are looking at the column names row
            curr_cols = get_columns_list(content, [])
        else: # first col is month and year
            months.add(row_name)
            for idx, column_name in enumerate(curr_cols):
                if split_row[idx+1] != "":
                    if column_name not in data_struct.keys():
                        data_struct[column_name] = {}
                    data_struct[column_name][row_name] = split_row[idx+1] # swap them

    return data_struct, months

def process(data: ListStr, action:str) -> None:
    if action == "+":
        data_struct, columns = outer_join(data, set(), {})
        fn = _return
        columns = sorted(columns)
    elif action == "sum":
        data_struct, columns = _sum(data, set(), {})
        fn = _return_sums
        columns = sorted(columns)
    elif action == "transpose":
        data_struct, columns = transpose(data, set(), {})
        fn = _return

    print_column_names(columns)
    fn(data_struct, columns)

def main():
    script = sys.argv[0]
    action = sys.argv[1]
    assert action in ['+', 'sum', 'transpose'], \
           'Action is not one of +: ' + action

    data = []
    while True:
        line = sys.stdin.readline()
        if not line:
            break
        words = line.split()
        if len(words) > 0:
            for word in words:
                data.append(word)

    process(data, action)

if __name__ == '__main__':
    main()